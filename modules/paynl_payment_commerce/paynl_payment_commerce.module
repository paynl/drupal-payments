<?php

/**
 * @file
 * Extends Pay.nl integration for the Payment platform for Drupal Commerce.
 */

/**
 * Implements hook_paynl_payment_transaction_data_alter().
 */
function paynl_payment_commerce_paynl_payment_transaction_data_alter($transaction_data, Payment $payment) {
  // We are only handling Drupal Commerce payments here.
  if ($payment->context == 'payment_commerce') {
    $order_id = $payment->context_data['order_id'];
    $order = commerce_order_load($order_id);

    // Add address information to the transaction data.
    $shipping_profile_ids = field_get_items('commerce_order', $order, 'commerce_customer_shipping');
    // We assume there is only one profile.
    $shipping_profile_id = reset($shipping_profile_ids);
    $profile = commerce_customer_profile_load($shipping_profile_id['profile_id']);
    $addresses = field_get_items('commerce_customer_profile', $profile, 'commerce_customer_address');
    // We assume there is only one address.
    $address = reset($addresses);
    $transaction_data['address'] = array(
      'streetName' => $address['thoroughfare'],
      'zipCode' => $address['postal_code'],
      'city' => $address['locality'],
      'country' => $address['country'],
    );
    $billing_profile_ids = field_get_items('commerce_order', $order, 'commerce_customer_billing');
    // We assume there is only one profile.
    $billing_profile_id = reset($billing_profile_ids);
    $profile = commerce_customer_profile_load($billing_profile_id['profile_id']);
    $addresses = field_get_items('commerce_customer_profile', $profile, 'commerce_customer_address');
    // We assume there is only one address.
    $address = reset($addresses);
    $transaction_data['invoiceAddress'] = array(
      'initials' => $address['first_name'],
      'lastName' => $address['last_name'],
      'streetName' => $address['thoroughfare'],
      'zipCode' => $address['postal_code'],
      'city' => $address['locality'],
      'country' => $address['country'],
    );
  }
}
