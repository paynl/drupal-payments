<?php

/**
 * @file
 * Provides paynl integration for the Payment platform.
 */

define('PAYNL_PAYMENT_RETURN_PATH', 'payment/paynl/return');
define('PAYNL_PAYMENT_LISTENER_PATH', 'payment/paynl/listener');

/**
 * Implements hook_menu().
 */
function paynl_payment_menu() {
  $items = array();

  $items[PAYNL_PAYMENT_RETURN_PATH] = array(
    'page callback' => 'paynl_payment_return',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items[PAYNL_PAYMENT_LISTENER_PATH] = array(
    'page callback' => 'paynl_payment_listener',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/payment/paynl/method/%'] = array(
    'title' => t('Pay.nl settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paynl_payment_method_settings_form', 6),
    'access arguments' => array('administer paynl payment'),
    'file' => 'paynl_payment.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/payment/paynl'] = array(
    'title' => t('Pay.nl payment methods'),
    'page callback' => 'paynl_payment_methods_overview',
    'access arguments' => array('administer paynl payment'),
    'file' => 'paynl_payment.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function paynl_payment_permission() {
  return array(
    'administer paynl payment' => array(
      'title' => t('Administer Pay.nl Payment'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function paynl_payment_theme() {
  return array(
    'paynl_payment_method_settings_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_payment_method_controller_info().
 */
function paynl_payment_payment_method_controller_info() {
  return array('PaynlPaymentMethodController');
}

/**
 * Implements hook_entity_load().
 */
function paynl_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'PaynlPaymentMethodController') {
        $payment_method->controller_data
          = variable_get('paynl_payment_' . $payment_method->pmid . '_controller_data', array());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function paynl_payment_payment_method_insert(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'PaynlPaymentMethodController') {
    variable_set('paynl_payment_' . $payment_method->pmid . '_controller_data',
            $payment_method->controller_data);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function paynl_payment_payment_method_update(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'PaynlPaymentMethodController') {
    variable_set('paynl_payment_' . $payment_method->pmid . '_controller_data',
            $payment_method->controller_data);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function paynl_payment_payment_method_delete(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'PaynlPaymentMethodController') {
    variable_del('paynl_payment_' . $payment_method->pmid . '_controller_data');
  }
}

/**
 * Return callback.
 *
 * @param string $pid
 *   The id of the payment.
 *
 * Pay.nl is redirecting the visitor here after the payment process. At this
 * point we don't know the status of the payment yet so we can only load
 * the payment and call its finish callback.
 */
function paynl_payment_return($pid) {
  // Load the payment.
  $payment = entity_load_single('payment', $pid);

  // Update order status.
  _paynl_payment_update_payment_status($payment);

  // Finish the payment.
  $payment->finish();
}

/**
 * Listener callback.
 *
 * @param string $pid
 *   The id of the payment.
 *
 * Pay.nl calls this after the payment status has been changed. Pay.nl only
 * gives us an id leaving us with the responsibility to get the payment status.
 */
function paynl_payment_listener($pid) {
  // Load the payment.
  $payment = entity_load_single('payment', $pid);

  // Update order status.
  _paynl_payment_update_payment_status($payment, 'exchange');

  // Return TRUE.
  print 'TRUE';
  exit(0);
}

/**
 * Helper function to update payment status.
 */
function _paynl_payment_update_payment_status($payment, $type = 'return') {
  // Get configuration data.
  $controller_data = $payment->method->controller_data;

  // Configure API.
  $api_key = $controller_data['paynl_id'];
  $service_id = $controller_data['paynl_service_id'];
  \Paynl\Config::setApiToken($api_key);
  \Paynl\Config::setServiceId($service_id);

  // Change status of payment based on transaction status.
  $transaction = ($type == 'return') ? \Paynl\Transaction::getForReturn() : \Paynl\Transaction::getForExchange();
  $payment_status = ($transaction->isPaid())
    ? PAYMENT_STATUS_SUCCESS : (($transaction->isCanceled())
      ? PAYMENT_STATUS_CANCELLED : PAYMENT_STATUS_PENDING);

  $payment->setStatus(new PaymentStatusItem($payment_status));
  entity_save('payment', $payment);
}

/**
 * Payment method configuration form elements callback.
 *
 * @param array $form
 *   A Drupal form array.
 * @param array $form_state
 *   The current state of the form.
 *
 * @return array
 *   A Drupal form array.
 */
function paynl_payment_method_configuration(array $form, array &$form_state) {
  $controller_data = $form_state['payment_method']->controller_data;

  if (!is_array($form)) {
    $form = array();
  }

  $form['paynl_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Pay.nl API key'),
    '#description' => t('Your Pay.nl API key'),
    '#default_value' => isset($controller_data['paynl_id']) ? $controller_data['paynl_id'] : '',
  );

  $form['paynl_service_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Pay.nl Service ID'),
    '#description' => t('Your Pay.nl Service ID'),
    '#default_value' => isset($controller_data['paynl_service_id']) ? $controller_data['paynl_service_id'] : '',
  );

  $form['paynl_test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Test mode'),
    '#description' => t('Use Pay.nl in test mode (don\'t forget to disable in production)'),
    '#return_value' => 1,
    '#default_value' => isset($controller_data['paynl_test_mode']) ? $controller_data['paynl_test_mode'] : 0,
  );

  return $form;
}

/**
 * Validation callback for payment method configuration form elements callback.
 *
 * @param array $form
 *   A Drupal form array.
 * @param array $form_state
 *   The current state of the form.
 */
function paynl_payment_method_configuration_validate(array $form, array &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $form['#parents']);

  $form_state['payment_method']->controller_data['paynl_id'] = $values['paynl_id'];
  $form_state['payment_method']->controller_data['paynl_service_id'] = $values['paynl_service_id'];
  $form_state['payment_method']->controller_data['paynl_test_mode'] = $values['paynl_test_mode'];
}

/**
 * Theme the method settings form as a table.
 */
function theme_paynl_payment_method_settings_form($variables) {
  $form = $variables['form'];

  $header = array();
  $header_set = FALSE;
  $output = '';
  $rows = array();
  foreach (element_children($form['payment_methods']) as $key) {
    $form['payment_methods'][$key]['weight']['#attributes']['class'] = array('payment-method-weight');

    foreach (element_children($form['payment_methods'][$key]) as $element_key) {
      if (!$header_set) {
        $header[] = t($form['payment_methods'][$key][$element_key]['#title']);
      }
      $form['payment_methods'][$key][$element_key]['#title_display'] = 'invisible';
    }
    $header_set = TRUE;

    $row = array();
    $row[] = drupal_render($form['payment_methods'][$key]['enabled']);
    $row[] = $form['payment_methods'][$key]['id']['#value'] . drupal_render($form['payment_methods'][$key]['id']);
    $row[] = $form['payment_methods'][$key]['name']['#value'] . drupal_render($form['payment_methods'][$key]['name']);
    $row[] = drupal_render($form['payment_methods'][$key]['fee']);
    $row[] = drupal_render($form['payment_methods'][$key]['fee_type']);
    $row[] = drupal_render($form['payment_methods'][$key]['countries']);
    $row[] = drupal_render($form['payment_methods'][$key]['min']);
    $row[] = drupal_render($form['payment_methods'][$key]['max']);
    $row[] = drupal_render($form['payment_methods'][$key]['weight']);

    $rows[] = array(
      'data' => $row,
      'class' => array('draggable'),
    );
  }

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'payment-methods-table'),
  ));

  $output .= drupal_render_children($form);

  drupal_add_tabledrag('payment-methods-table', 'order', 'sibling', 'payment-method-weight', NULL, NULL, TRUE);

  return $output;
}

/**
 * Implements
 * PaymentMethodController::payment_configuration_form_elements_callback.
 */
function paynl_payment_payment_configuration(array $element, array &$form_state) {
  $payment = $form_state['payment'];

  // Get enabled payment methods for this payment method controller.
  $payment_methods = paynl_payment_load_payment_methods($payment);

  $payment_method_option_list = array();
  foreach ($payment_methods as $payment_method) {
    $payment_method_option_list[$payment_method->id]
      = $payment_method->settings['name'] . ' (' . $payment_method->settings['calculated_fee'] . ')';
  }

  $elements = array(
    'payment_method' => array(
      '#type' => 'select',
      '#title' => t('Payment method'),
      '#title_display' => 'invisible',
      '#options' => $payment_method_option_list,
    ),
  );

  return $elements;
}

/**
 *
 */
function paynl_payment_payment_configuration_validate(array $element, array &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  $form_state['payment']->context_data['payment_method'] = $values['payment_method'];
}

/**
 * Load a specific Pay.nl payment method.
 */
function paynl_payment_load_payment_method($id, $pmid) {
  $payment_methods = _paynl_payment_load_method_settings($pmid);

  return $payment_methods[$id];
}

/**
 * Load enabled Pay.nl payment methods.
 */
function paynl_payment_load_payment_methods(Payment $payment) {
  $pmid = $payment->method->pmid;
  $payment_methods = _paynl_payment_load_method_settings($pmid);

  // Remove methods that are not enabled.
  foreach ($payment_methods as $id => $payment_method) {
    if (!$payment_method->settings['enabled']) {
      unset($payment_methods[$id]);
    }
  }

  // Validated enabled methods against current payment.
  paynl_payment_validate_payment_methods($payment_methods, $payment);

  // Calculate the fee for each method.
  foreach ($payment_methods as $payment_method) {
    $fee = paynl_payment_calculate_fee($payment_method, $payment, TRUE);
    $payment_method->settings['calculated_fee'] = payment_amount_human_readable($fee, $payment->currency_code);
  }

  return $payment_methods;
}

/**
 * Validate Pay.nl payment methods against a payment.
 */
function paynl_payment_validate_payment_methods(&$payment_methods, Payment $payment) {
  foreach ($payment_methods as $id => $payment_method) {
    // Remove payment methods that are not available for the current country.
    $current_country = paynl_payment_current_country($payment);
    $allowed_countries = $payment_method->settings['countries'];
    if ($current_country && !empty($allowed_countries)) {
      if (!in_array($current_country, $allowed_countries)) {
        unset($payment_methods[$id]);
      }
    }

    // Remove payment methods that require a higher total amount.
    if ($payment->totalAmount(TRUE) < $payment_method->settings['min']) {
      unset($payment_methods[$id]);
    }

    // Remove payment methods that require a lower total amount.
    if (($payment_method->settings['max'] != -1)
      && ($payment->totalAmount(TRUE) > $payment_method->settings['max'])) {
      unset($payment_methods[$id]);
    }
  }
}

/**
 * Get the country from the payment context.
 */
function paynl_payment_current_country(Payment $payment) {
  $country = NULL;

  drupal_alter('paynl_payment_current_country', $country, $payment);

  return $country;
}

/**
 * Calculate transaction fee for a payment method for a specific payment.
 */
function paynl_payment_calculate_fee($payment_method, Payment $payment, $tax) {
  $fee = 0;
  if (!empty($payment_method->settings['fee'])) {
    $fee = $payment_method->settings['fee'];
    if ($tax) {
      $tax_rate = _paynl_payment_payment_tax_rate($payment);
      $fee = (1 + $tax_rate) * $fee;
    }
    if ($payment_method->settings['fee_type'] == 'percentage') {
      $fee = ($payment_method->settings['fee'] / 100) * $payment->totalAmount($tax);
    }
  }

  // Ensure two decimals.
  return round(100 * $fee) / 100;
}

/**
 * Implements hook_payment_pre_execute().
 *
 * Add the transaction fee as a line item.
 */
function paynl_payment_payment_pre_execute(Payment $payment) {
  // Use maximum tax rate for transaction fee.
  $tax_rate = _paynl_payment_payment_tax_rate($payment);

  $payment_method = paynl_payment_load_payment_method($payment->context_data['payment_method'],
    $payment->method->pmid);
  $fee = paynl_payment_calculate_fee($payment_method, $payment, FALSE);
  if ($fee > 0) {
    $payment->setLineItem(new PaymentLineItem(array(
      'name' => 'transaction_fee',
      'amount' => $fee,
      'description' => 'Transaction fee',
      'tax_rate' => $tax_rate,
    )));
  }
}

/**
 * Helper function to load payment method settings.
 */
function _paynl_payment_load_method_settings($pmid) {
  $payment_methods = db_select('paynl_payment_method_settings', 'p')
    ->fields('p')
    ->condition('pmid', $pmid)
    ->orderBy('weight')
    ->execute()
    ->fetchAllAssoc('id');

  if ($payment_methods) {
    foreach ($payment_methods as $payment_method) {
      $payment_method->settings = unserialize($payment_method->settings);
    }
  }
  else {
    $payment_methods = array();
  }

  return $payment_methods;
}

/**
 * Helper function to get the maximum tax rate for a payment.
 */
function _paynl_payment_payment_tax_rate(Payment $payment) {
  $tax_rate = 0;
  $line_items = $payment->getLineItems();
  foreach ($line_items as $line_item) {
    if ($line_item->tax_rate > $tax_rate) {
      $tax_rate = $line_item->tax_rate;
    }
  }

  return $tax_rate;
}

/**
 * Helper function to split an address line into a streetname and a housenumber.
 *
 * Function provided by Pay.nl.
 */
function _paynl_payment_split_address($strAddress) {
  $strAddress = trim($strAddress);
  $a               = preg_split('/([0-9]+)/', $strAddress, 2,
    PREG_SPLIT_DELIM_CAPTURE);
  $strStreetName   = trim(array_shift($a));
  $strStreetNumber = trim(implode('', $a));
  if (empty($strStreetName)) { // American address notation
    $a = preg_split('/([a-zA-Z]{2,})/', $strAddress, 2,
      PREG_SPLIT_DELIM_CAPTURE);
    $strStreetNumber = trim(array_shift($a));
    $strStreetName   = implode(' ', $a);
  }

  return array($strStreetName, $strStreetNumber);
}
