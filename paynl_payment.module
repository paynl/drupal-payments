<?php

/**
 * @file
 * Provides paynl integration for the Payment platform.
 */

define('PAYNL_PAYMENT_RETURN_PATH', 'payment/paynl/return');
define('PAYNL_PAYMENT_LISTENER_PATH', 'payment/paynl/listener');

/**
 * Implements hook_menu().
 */
function paynl_payment_menu() {
  $items = array();

  $items[PAYNL_PAYMENT_RETURN_PATH] = array(
    'page callback' => 'paynl_payment_return',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items[PAYNL_PAYMENT_LISTENER_PATH] = array(
    'page callback' => 'paynl_payment_listener',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/payment/paynl/method/%'] = array(
    'title' => t('Pay.nl settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paynl_payment_method_settings_form', 6),
    'access arguments' => array('administer paynl payment'),
    'file' => 'paynl_payment.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/payment/paynl'] = array(
    'title' => t('Pay.nl payment methods'),
    'page callback' => 'paynl_payment_methods_overview',
    'access arguments' => array('administer paynl payment'),
    'file' => 'paynl_payment.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function paynl_payment_permission() {
  return array(
    'administer paynl payment' => array(
      'title' => t('Administer Pay.nl Payment'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function paynl_payment_theme() {
  return array(
    'paynl_payment_method_settings_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_payment_method_controller_info().
 */
function paynl_payment_payment_method_controller_info() {
  return array('PaynlPaymentMethodController');
}

/**
 * Implements hook_entity_load().
 */
function paynl_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'PaynlPaymentMethodController') {
        $payment_method->controller_data
          = variable_get('paynl_payment_' . $payment_method->pmid . '_controller_data', array());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function paynl_payment_payment_method_insert(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'PaynlPaymentMethodController') {
    variable_set('paynl_payment_' . $payment_method->pmid . '_controller_data',
            $payment_method->controller_data);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function paynl_payment_payment_method_update(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'PaynlPaymentMethodController') {
    variable_set('paynl_payment_' . $payment_method->pmid . '_controller_data',
            $payment_method->controller_data);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function paynl_payment_payment_method_delete(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'PaynlPaymentMethodController') {
    variable_del('paynl_payment_' . $payment_method->pmid . '_controller_data');
  }
}

/**
 * Return callback.
 *
 * @param string $pid
 *   The id of the payment.
 *
 * Pay.nl is redirecting the visitor here after the payment process. At this
 * point we don't know the status of the payment yet so we can only load
 * the payment and call its finish callback.
 */
function paynl_payment_return($pid) {
  // Load the payment.
  $payment = entity_load_single('payment', $pid);

  // Update order status.
  _paynl_payment_update_payment_status($payment);

  // Finish the payment.
  $payment->finish();
}

/**
 * Listener callback.
 *
 * @param string $pid
 *   The id of the payment.
 *
 * Pay.nl calls this after the payment status has been changed. Pay.nl only
 * gives us an id leaving us with the responsibility to get the payment status.
 */
function paynl_payment_listener($pid) {
  // Load the payment.
  $payment = entity_load_single('payment', $pid);

  // Update order status.
  _paynl_payment_update_payment_status($payment, 'exchange');

  // Return TRUE.
  print 'TRUE';
  exit(0);
}

/**
 * Helper function to update payment status.
 */
function _paynl_payment_update_payment_status($payment, $type = 'return') {
  // Get configuration data.
  $controller_data = $payment->method->controller_data;

  // Configure API.
  $api_key = $controller_data['paynl_id'];
  $service_id = $controller_data['paynl_service_id'];
  \Paynl\Config::setApiToken($api_key);
  \Paynl\Config::setServiceId($service_id);

  // Change status of payment based on transaction status.
  $transaction = ($type == 'return') ? \Paynl\Transaction::getForReturn() : \Paynl\Transaction::getForExchange();
  $payment_status = ($transaction->isPaid())
    ? PAYMENT_STATUS_SUCCESS : (($transaction->isCanceled())
      ? PAYMENT_STATUS_CANCELLED : PAYMENT_STATUS_PENDING);

  $payment->setStatus(new PaymentStatusItem($payment_status));
  entity_save('payment', $payment);
}

/**
 * Payment method configuration form elements callback.
 *
 * @param array $form
 *   A Drupal form array.
 * @param array $form_state
 *   The current state of the form.
 *
 * @return array
 *   A Drupal form array.
 */
function paynl_payment_method_configuration(array $form, array &$form_state) {
  $controller_data = $form_state['payment_method']->controller_data;

  if (!is_array($form)) {
    $form = array();
  }

  $form['paynl_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Pay.nl API key'),
    '#description' => t('Your Pay.nl API key'),
    '#default_value' => isset($controller_data['paynl_id']) ? $controller_data['paynl_id'] : '',
  );

  $form['paynl_service_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Pay.nl Service ID'),
    '#description' => t('Your Pay.nl Service ID'),
    '#default_value' => isset($controller_data['paynl_service_id']) ? $controller_data['paynl_service_id'] : '',
  );

  $form['paynl_test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Test mode'),
    '#description' => t('Use Pay.nl in test mode (don\'t forget to disable in production)'),
    '#return_value' => 1,
    '#default_value' => isset($controller_data['paynl_test_mode']) ? $controller_data['paynl_test_mode'] : 0,
  );

  return $form;
}

/**
 * Validation callback for payment method configuration form elements callback.
 *
 * @param array $form
 *   A Drupal form array.
 * @param array $form_state
 *   The current state of the form.
 */
function paynl_payment_method_configuration_validate(array $form, array &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $form['#parents']);

  $form_state['payment_method']->controller_data['paynl_id'] = $values['paynl_id'];
  $form_state['payment_method']->controller_data['paynl_service_id'] = $values['paynl_service_id'];
  $form_state['payment_method']->controller_data['paynl_test_mode'] = $values['paynl_test_mode'];
}

/**
 * Theme the method settings form as a table.
 */
function theme_paynl_payment_method_settings_form($variables) {
  $form = $variables['form'];

  $header = array();
  $header_set = FALSE;
  $output = '';
  $rows = array();
  foreach (element_children($form['payment_methods']) as $key) {
    $form['payment_methods'][$key]['weight']['#attributes']['class'] = array('payment-method-weight');

    foreach (element_children($form['payment_methods'][$key]) as $element_key) {
      if (!$header_set) {
        $header[] = t($form['payment_methods'][$key][$element_key]['#title']);
      }
      $form['payment_methods'][$key][$element_key]['#title_display'] = 'invisible';
    }
    $header_set = TRUE;

    $row = array();
    $row[] = drupal_render($form['payment_methods'][$key]['enabled']);
    $row[] = $form['payment_methods'][$key]['id']['#value'] . drupal_render($form['payment_methods'][$key]['id']);
    $row[] = $form['payment_methods'][$key]['name']['#value'] . drupal_render($form['payment_methods'][$key]['name']);
    $row[] = drupal_render($form['payment_methods'][$key]['fee']);
    $row[] = drupal_render($form['payment_methods'][$key]['fee_type']);
    $row[] = drupal_render($form['payment_methods'][$key]['countries']);
    $row[] = drupal_render($form['payment_methods'][$key]['min']);
    $row[] = drupal_render($form['payment_methods'][$key]['max']);
    $row[] = drupal_render($form['payment_methods'][$key]['weight']);

    $rows[] = array(
      'data' => $row,
      'class' => array('draggable'),
    );
  }

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'payment-methods-table'),
  ));

  $output .= drupal_render_children($form);

  drupal_add_tabledrag('payment-methods-table', 'order', 'sibling', 'payment-method-weight', NULL, NULL, TRUE);

  return $output;
}
